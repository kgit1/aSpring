<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Define your beans here -->

	<!-- injecting objects to spring container and injecting values through 
		setters to this objects -->
	<!-- create new dog object in spring container -->
	<!-- equals to Animal doge1 = new Dog(); -->
	<bean id="doge1" class="a1.Start.Dog">
		<!-- set values to doge1 -->
		<!-- equals to doge1.setName("doge1"); -->
		<property name="name" value="doge1" />
		<!-- equals to doge1.setAge("11"); -->
		<property name="age" value="11" />
	</bean>

	<bean id="doge2" class="a1.Start.Dog">
		<!-- set values to doge2 -->
		<!-- equals to doge2.setName("doge2"); -->
		<property name="name" value="doge2" />
		<!-- equals to doge2.setAge(doge1.age+2); -->
		<!-- #{} <- means SpEl language equation -->
		<property name="age" value="#{doge1.age+2}" />
	</bean>

	<bean id="doge3" class="a1.Start.Dog">
		<!-- set values to doge3 -->
		<!-- equals to doge3.setName("doge3"); -->
		<property name="name" value="doge3" />
		<!-- equals to doge3.setAge(Math.random()*12); -->
		<!-- #{} <- means SpEl language equation -->
		<!-- T() <- means static method in SpEl language equation -->
		<!-- we call static method random() from Math.class -->
		<property name="age" value="#{(T(java.lang.Math).random())*12}" />
	</bean>

	<!-- create new owner object in spring container -->
	<!-- equals to Person john = new Owner(); -->
	<bean id="habs" class="a1.Start.Owner">
		<!-- set values to john -->
		<!-- equals to john.setName("John"); -->
		<property name="name" value="John" />
		<!-- equals to john.setlastName("Doe"); -->
		<property name="lastName" value="Doe" />
		<!-- equals to john.setAddress("Sul Shtrasse"); -->
		<property name="Address" value="Sul Shtrasse" />
		<!-- equals to john.setPet(doge); -->
		<property name="pet" ref="doge1" />
	</bean>

	<!-- init-method will be called on method creation -->
	<!-- and destroy-method will be called on method destroy -->
	<!-- default init- method can be added at schema declaration at the -->
	<!-- begining of this context file -->
	<bean id="cote" class="a1.Start.Cat" init-method="myInitMethod"
		destroy-method="myDestroyMethod">
		<!-- to replace method - write his name and name of class from which replacing 
			method donated -->
		<replaced-method name="toString" replacer="tiger" />

		<!-- also you can replace method with<lookup-method> which doen't need 
			class with replacing interface to replace method for example <lookum-method 
			name = "getName" bean="Dog"/> and getName method will be returning instance 
			of Dog not String -->
	</bean>

	<!-- special bean which implements MethodReplacer interface to donate method 
		to our cote -->
	<bean id="tiger" class="a1.Start.Tiger" />

	<!-- create default values for owners objects -->
	<!-- abstract="true" tells spring to not create this object -->
	<bean id="basePerson" class="a1.Start.Owner" abstract="true">
		<!-- set values to john -->
		<!-- equals to john.setName("John"); -->
		<property name="name" value="John" />
		<!-- equals to john.setlastName("Doe"); -->
		<property name="lastName" value="Doe" />
		<!-- equals to john.setAddress("Sul Shtrasse"); -->
		<property name="Address" value="Sul Shtrasse" />
		<!-- equals to john.setPet(doge); -->
		<property name="pet" ref="doge2" />
	</bean>

	<!-- create some object which will take all properties and values from parent 
		including class -->
	<bean id="john" parent="basePerson">
		<!-- overwrite address property -->
		<property name="Address" value="Muchul Kuchul" />
	</bean>

	<bean id="ariana" parent="basePerson">
		<!-- overwrite name property -->
		<property name="name" value="Ariana" />
	</bean>

	<bean id="aramco" class="a1.Start.Owner">
		<property name="name" value="aramco" />
		<property name="lastName" value="arara" />
		<property name="address" value="abompa street" />
	</bean>

	<bean id="aramco1" class="a1.Start.Owner">
		<property name="name" value="aramco1" />
		<property name="lastName" value="arara" />
		<!-- to set address property here - we get address from bean aramco -->
		<!--by invoking it's method getAddress and than invoke strings -->
		<!-- method - toUpperCase and ->? here in -->
		<!-- "#{aramco.getAddress()?.toUpperCase()}" -->
		<!-- means if true - if value will be null - than toUpperCase() -->
		<!-- wouldn't be invoked -->
		<property name="address" value="#{aramco.getAddress()?.toUpperCase()}" />
	</bean>

	<!-- to add aspects to spring -->
	<!--xmlns:aop="http://www.springframework.org/schema/aop -->
	<!--http://www.springframework.org/schema/aop -->
	<!--http://www.springframework.org/schema/aop/spring-aop.xsd -->
	
	<!-- to add aspects with annotations in java class <aop:aspectj-autoproxy/> 
		here in xml -->
	<!-- and @Aspect @Pointcut @Around @Before @After @AfterReturning @AfterThrowing 
		annotations in java class -->
		
	<!-- config aspect -->
	<!-- inject methods to invoke before and after toString -->
	<aop:config>
		<!-- show from which class take methods -->
		<aop:aspect ref="cote">
			<!-- create pointcut -->
			<aop:pointcut id="in" expression="execution(* *.pointMethod(..))" />
			<!-- inject before method -->
			<aop:before pointcut-ref="in" method="beforeMethod" />
			<!-- inject after method -->
			<aop:after pointcut-ref="in" method="afterMethod" />
		</aop:aspect>
	</aop:config>



	<context:property-placeholder location="classpath:prop.properties" />
</beans>
